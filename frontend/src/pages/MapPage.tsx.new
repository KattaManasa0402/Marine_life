import React, { useState, useEffect, useCallback } from 'react';

// Map imports for react-map-gl v7+
import Map, { Marker, Popup, NavigationControl, GeolocateControl, FullscreenControl, ScaleControl, type MapLayerMouseEvent } from 'react-map-gl';
import 'mapbox-gl/dist/mapbox-gl.css';

// Project imports
import api from '../api/axios';
import { MapDataPoint } from '../types';
import { Link } from 'react-router-dom';
import Spinner from '../components/common/Spinner';
import { motion, AnimatePresence } from 'framer-motion';
import GlassCard from '../components/common/GlassCard';
import MapSidebar from '../components/common/MapSidebar';
import MarkerPulse from '../components/common/MarkerPulse';


function MapPage() {
  // Map view state configuration
  const [viewState, setViewState] = useState({
    longitude: -20,
    latitude: 30,
    zoom: 2.2,
    pitch: 40, // Enhanced 3D look with more tilt
    bearing: 0,
  });

  // State for tracking cursor position for displaying coordinates
  const [cursorPosition, setCursorPosition] = useState({ latitude: 0, longitude: 0 });
  const [mapData, setMapData] = useState<MapDataPoint[]>([]);
  const [selectedPin, setSelectedPin] = useState<MapDataPoint | null>(null);
  const [loading, setLoading] = useState(true);
  const [mapStyle, setMapStyle] = useState('mapbox://styles/mapbox/navigation-night-v1');
  const [showLegend, setShowLegend] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  
  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  // Mapbox token from environment variables
  const MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;

  // useEffect to fetch data when the component mounts
  useEffect(() => {
    const fetchMapData = async () => {
      setLoading(true);
      try {
        const response = await api.get<MapDataPoint[]>('/map/data');
        setMapData(response.data.filter(p => p.latitude && p.longitude));
      } catch (error) {
        console.error('Failed to fetch map data', error);
      } finally {
        setLoading(false);
      }
    };
    fetchMapData();
  }, []); // Empty array ensures this runs only once
  
  // Handle mouse movement to track coordinates
  const handleMouseMove = (event: MapLayerMouseEvent) => {
    setCursorPosition({
      longitude: Number(event.lngLat.lng.toFixed(6)),
      latitude: Number(event.lngLat.lat.toFixed(6))
    });
  };
  
  // Handle selecting a location from the sidebar
  const handleSelectLocation = useCallback((point: MapDataPoint) => {
    setSelectedPin(point);
    setViewState(prev => ({
      ...prev,
      longitude: point.longitude,
      latitude: point.latitude,
      zoom: 5,
      transitionDuration: 1000
    }));
    
    // Close sidebar on mobile after selection
    if (window.innerWidth < 768) {
      setIsSidebarOpen(false);
    }
  }, []);

  // Handle map style changes
  const mapStyles = [
    { id: 'satellite', label: 'Satellite', value: 'mapbox://styles/mapbox/satellite-streets-v12' },
    { id: 'night', label: 'Night', value: 'mapbox://styles/mapbox/navigation-night-v1' },
    { id: 'ocean', label: 'Ocean', value: 'mapbox://styles/mapbox/outdoors-v12' }
  ];
  
  // Get unique species count
  const getUniqueSpeciesCount = () => {
    if (mapData.length === 0) return 0;
    const speciesSet = new Set<string>();
    mapData.forEach(item => {
      const species = item.validated_species || item.species_prediction;
      if (species) {
        speciesSet.add(species);
      }
    });
    return speciesSet.size;
  };

  if (loading) {
    return (
      <div className="flex flex-col justify-center items-center h-96">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <div className="relative">
            <Spinner size="16" />
            <div className="absolute -inset-4 rounded-full bg-aqua-glow/30 animate-pulse-slow blur-md"></div>
          </div>
        </motion.div>
        <motion.p 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="text-aqua-glow mt-6"
        >
          Loading the depths of our oceans...
        </motion.p>
      </div>
    );
  }

  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.8 }}
      className="container mx-auto px-4 pb-20"
    >
      {/* Map Title Section */}
      <motion.div 
        className="text-center my-8"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1 className="text-4xl md:text-5xl lg:text-6xl font-display font-bold mb-4">
          <span className="bg-clip-text text-transparent bg-gradient-to-r from-aqua-glow via-azure to-bioluminescent">
            Global Discovery Map
          </span>
        </h1>
        <p className="text-lg text-white/80 max-w-3xl mx-auto">
          Explore marine life sightings from around the world. Interactive mapping reveals the patterns and 
          diversity of ocean ecosystems through our community observations.
        </p>
      </motion.div>
      
      {/* Main Map Section with Interactive Controls */}
      <motion.div 
        className="relative w-full h-[70vh] rounded-3xl overflow-hidden border border-white/10 shadow-lg"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        {/* Sidebar Toggle Button */}
        <div className="absolute top-4 left-4 z-10">
          <button
            onClick={() => setIsSidebarOpen(true)}
            className="p-3 bg-deep-blue/80 border border-white/10 backdrop-blur-md rounded-lg text-white hover:bg-aqua-glow/20 transition-colors"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
            </svg>
          </button>
        </div>

        {/* Map Controls & Info Panel */}
        <div className="absolute top-4 right-4 z-10">
          <GlassCard className="p-4 backdrop-blur-lg">
            <h3 className="font-semibold text-white/90 mb-3 text-center border-b border-white/10 pb-1">Map Controls</h3>
            <div className="flex gap-2 mb-3 justify-center flex-wrap">
              {mapStyles.map(style => (
                <button 
                  key={style.id} 
                  onClick={() => setMapStyle(style.value)}
                  className={`px-3 py-1.5 rounded-lg text-sm transition-all duration-300 border ${
                    mapStyle === style.value 
                      ? 'bg-aqua-glow/20 border-aqua-glow text-white' 
                      : 'bg-deep-sea/40 border-white/5 text-white/70 hover:border-white/20 hover:bg-deep-sea/60'
                  }`}
                >
                  {style.label}
                </button>
              ))}
            </div>
            
            {/* Coordinates Display */}
            <div className="grid grid-cols-2 gap-x-2 text-xs mt-2">
              <span className="text-aqua-glow">Latitude:</span>
              <span className="font-mono text-white/80">{cursorPosition.latitude}</span>
              <span className="text-aqua-glow">Longitude:</span>
              <span className="font-mono text-white/80">{cursorPosition.longitude}</span>
            </div>
            
            <div className="grid grid-cols-2 gap-2 mt-3">
              {/* Legend Toggle Button */}
              <button 
                onClick={() => setShowLegend(!showLegend)}
                className="px-3 py-1.5 bg-bioluminescent/30 hover:bg-bioluminescent/50 transition-colors rounded-lg text-sm text-white"
              >
                {showLegend ? 'Hide Legend' : 'Show Legend'}
              </button>
              
              {/* List Toggle Button */}
              <button 
                onClick={() => setIsSidebarOpen(true)}
                className="px-3 py-1.5 bg-azure/30 hover:bg-azure/50 transition-colors rounded-lg text-sm text-white"
              >
                Sightings List
              </button>
            </div>
          </GlassCard>
        </div>
        
        {/* Map Sidebar */}
        <MapSidebar 
          isOpen={isSidebarOpen} 
          onClose={() => setIsSidebarOpen(false)} 
          data={mapData} 
          onSelectLocation={handleSelectLocation}
        />
        
        {/* Legend Panel */}
        <AnimatePresence>
          {showLegend && (
            <motion.div 
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="absolute bottom-4 left-4 z-10"
            >
              <GlassCard className="p-4 backdrop-blur-lg">
                <h3 className="font-semibold text-white/90 border-b border-white/10 pb-1 mb-2">Map Legend</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-aqua-glow animate-pulse-glow"></div>
                    <span className="text-white/80">Validated Sightings</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-coral-accent/70"></div>
                    <span className="text-white/80">Unverified Sightings</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-bioluminescent"></div>
                    <span className="text-white/80">Recent Discoveries</span>
                  </div>
                </div>
              </GlassCard>
            </motion.div>
          )}
        </AnimatePresence>
        
        <Map
          {...viewState}
          mapStyle={mapStyle}
          onMove={evt => setViewState(evt.viewState)}
          onMouseMove={handleMouseMove}
          mapboxAccessToken={MAPBOX_TOKEN}
          attributionControl={false}
          projection={{name: 'globe'}}
          style={{ width: '100%', height: '100%' }}
        >
          {/* Map Controls */}
          <GeolocateControl 
            position="top-left" 
            positionOptions={{enableHighAccuracy: true}} 
            trackUserLocation={true} 
            showAccuracyCircle={true} 
          />
          <FullscreenControl position="top-left" />
          <NavigationControl position="top-left" visualizePitch={true} />
          <ScaleControl position="bottom-left" />
          
          {/* Map Markers */}
          {mapData.map((point) => {
            // Determine marker style based on validation status
            const isValidated = point.validated_species || point.validated_health;
            const markerColor = isValidated ? 'bg-aqua-glow' : 'bg-coral-accent/70';
            
            // Check if it's recent (for highlighting special markers)
            const isRecent = point.id > mapData.length - 5; // Simple check for demo purposes
            const markerSize = isRecent ? 8 : 6;
            
            return (
              <Marker
                key={point.id}
                longitude={point.longitude}
                latitude={point.latitude}
                anchor="bottom"
                onClick={e => {
                  e.originalEvent.stopPropagation();
                  setSelectedPin(point);
                }}
              >
                <div className="relative backdrop-blur-sm rounded-full p-1">
                  <MarkerPulse 
                    color={isRecent ? 'bg-bioluminescent' : markerColor}
                    size={markerSize}
                    validated={isValidated ? true : false}
                    onClick={() => {}}
                  />
                </div>
              </Marker>
            );
          })}

          {/* Selected Pin Popup */}
          {selectedPin && (
            <Popup
              longitude={selectedPin.longitude}
              latitude={selectedPin.latitude}
              anchor="bottom"
              onClose={() => setSelectedPin(null)}
              closeOnClick={false}
              maxWidth="320px"
              className="map-popup-glass"
            >
              <div className="p-0 overflow-hidden rounded-lg">
                <div className="relative">
                  <img 
                    src={selectedPin.file_url} 
                    alt="Marine life observation" 
                    className="w-full h-40 object-cover object-center"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-deep-blue/80 to-transparent"></div>
                  <motion.div 
                    className="absolute bottom-3 left-3"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.2 }}
                  >
                    <h3 className="text-white font-bold text-lg drop-shadow-lg">
                      {selectedPin.validated_species || selectedPin.species_prediction || 'Unknown Species'}
                    </h3>
                  </motion.div>
                </div>
                
                <div className="p-4 bg-deep-blue/90 backdrop-blur-md">
                  <div className="space-y-2 mb-3">
                    <div className="flex items-center justify-between">
                      <span className="text-aqua-glow font-medium">Health Status:</span>
                      <span className="text-white">{selectedPin.validated_health || selectedPin.health_prediction || 'Unassessed'}</span>
                    </div>
                    
                    <div className="flex items-center justify-between text-xs">
                      <span className="text-aqua-glow/80">Location:</span>
                      <span className="text-white/80 font-mono">{selectedPin.latitude.toFixed(4)}, {selectedPin.longitude.toFixed(4)}</span>
                    </div>
                  </div>
                  
                  <Link 
                    to={`/media/${selectedPin.id}`} 
                    className="block text-center bg-gradient-to-r from-aqua-glow to-azure hover:from-azure hover:to-bioluminescent text-white font-medium rounded-lg py-2 mt-2 transition-all duration-300 transform hover:scale-[1.02]"
                  >
                    View Full Details
                  </Link>
                </div>
              </div>
            </Popup>
          )}
        </Map>
      </motion.div>
      
      {/* Map Statistics Section */}
      <motion.section 
        className="mt-16 mb-8"
        variants={containerVariants}
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true }}
      >
        <motion.h2 
          className="text-3xl md:text-4xl font-display font-bold text-center mb-10"
          variants={itemVariants}
        >
          <span className="bg-clip-text text-transparent bg-gradient-to-r from-bioluminescent via-aqua-glow to-azure inline-block pb-2">
            Sightings Statistics
          </span>
        </motion.h2>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {[
            { value: mapData.length, label: 'Total Sightings', icon: '🌊' },
            { value: mapData.filter(item => item.validated_species).length, label: 'Validated Species', icon: '✓' },
            { value: getUniqueSpeciesCount(), label: 'Unique Species', icon: '🐠' },
            { value: mapData.filter(item => item.health_prediction === 'Healthy').length, label: 'Healthy Specimens', icon: '💙' }
          ].map((stat, index) => (
            <motion.div
              key={index}
              variants={itemVariants}
              className="relative"
            >
              <GlassCard className="p-6 text-center h-full">
                <span className="absolute -top-4 right-4 text-3xl">{stat.icon}</span>
                <motion.p 
                  className="text-5xl lg:text-6xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-aqua-glow to-azure mb-3"
                  initial={{ scale: 0.5, opacity: 0 }}
                  whileInView={{ scale: 1, opacity: 1 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.5, delay: 0.2 + index * 0.1 }}
                >
                  {stat.value || 0}
                </motion.p>
                <p className="text-lg text-white/80">{stat.label}</p>
              </GlassCard>
            </motion.div>
          ))}
        </div>
      </motion.section>
      
      {/* Call to Action */}
      <motion.div 
        className="text-center mt-8 mb-16"
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ duration: 0.5 }}
      >
        <Link 
          to="/upload" 
          className="relative overflow-hidden bg-gradient-to-r from-aqua-glow to-azure text-white font-semibold text-lg px-10 py-4 rounded-full transform transition-all duration-300 hover:scale-105 hover:shadow-[0_0_25px_rgba(0,245,255,0.5)] inline-block group"
        >
          <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-azure to-bioluminescent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
          <span className="relative flex items-center justify-center z-10">
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
            </svg>
            Add Your Sighting
          </span>
        </Link>
      </motion.div>
    </motion.div>
  );
}

export default MapPage;
